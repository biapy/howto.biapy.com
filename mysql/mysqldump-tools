#!/bin/bash
#
# MySQLDump Tools.
# Command line tools to extract data from mysqldump exports.
#
# For suggestion and bug reports, please contact
# Pierre-Yves Landur√© <pierre-yves dot landure at biapy dot fr>
#
# upstreamUrl="https://raw.githubusercontent.com/biapy/howto.biapy.com/master/mysql/mysqldump-tools"
version="0.0.1"

# History
# -------
#
# 0.0.1
#  - First alpha release.
#





# Get the basename of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function basename() {

  [[ ${#} -eq 0 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      command basename -z -- "${@}" \
        | command tr -d '\0'
      ;;
    'Darwin' | * )
      command basename -- "${@}"
      ;;
  esac

  return ${?}
} # basename()
export -f 'basename'



# Get the absolute path for a file or directory.
# Print its path on &1 if found.
#
# @param string $path A relative path.
#
# @return ${realpath} A absolute path.
function realpath() {
  [[ ${#} -ne 1 ]] && exit 1

  local realpath

  case "$(uname)" in
    'Linux' )
      realpath="$(readlink -f "${1}")"
      ;;
    'Darwin' )
      realpath="$(stat -f '%N' "${1}")"
      ;;
    * )
      realpath="$(realpath "${1}")"
      ;;
  esac

  echo -n "${realpath}"
  return 0
} # realpath



scriptName="$(basename "${0}")"



# Print this script help.
# Exit with $exitCode if set.
#
# @param integer $exitCode An optionnal exit code value.
function usage {
  echo "MySQL Tools v${version}
This tool ease MySQL server administration from command line.

Usage :

  ${scriptName} [ --help ] [ --quiet | -q ] [ --verbose | -v ]
      [ --db-prefix='database_prefix' ] [ --user-prefix='user_prefix' ]
      [ --host='user_host' ] [ --auto-hosts ]
      [ --user='mysql_user' ] [ --password='mysql_password' ]
      [ --mysql='mysql' ] [ --server='localhost' ] [ --with-ssh[=root] ]
      [ --create='database_name' |
        --drop='database_name' |
        --empty='database_name' |
        --adduser='user_name' [ --grant='ALL' ] [ --database='database_name' ]
        --deluser='user_name'
      ]

  Available options are :
    * --mysql | -m    : Specify the mysql client command to use
                        (default to mysql).
    * --server | -s   : Specify the mysql server to connect to
                        (default to localhost).
    * --user | -u     : The user used to run the SQL queries.
    * --password | -p : The password of the user running the queries.
    * --with-ssh | -r : If server is remote and mysql connection failed,
                        try to run mysql-tools on the remote server via ssh.
                        Optional argument is SSH user to use (default to current user).
    * --host | -h     : The created user host (multiple occurence allowed).
    * --auto-hosts     : Automaticaly compute created user hosts.
    * --db-prefix | --dp    : The database name prefix.
    * --user-prefix | --up  : The username prefix.
    * --database | --db     : The database name.

  Available actions are :
    * --help          : Display this message.
    * --quiet | -q    : Disable almost all outputs.
    * --verbose | -v  : Enable debug outputs.
    * --create | -c   : Create a database and its user.
    * --empty | -e    : Drop all tables of a database.
    * --drop | -d     : Destroy the database and its user.
    * --adduser | -a  : Create a unprivilegied user, or a user for a database.
    * --grant | -g    : In conjunction with --adduser, set the create user
                        privileges (default: ALL) (multiple occurence allowed).
                        see: https://dev.mysql.com/doc/refman/5.0/fr/grant.html
    * --deluser       : Delete a mysql user.
"

  test -n "${1}" && exit "${1}"
} # usage



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
# Print its path on &1 if found.
#
# @param string $quiet A optionnal '--quiet' tag to disable the error message.
# @param string $exit A optionnal '--exit' tag to enable exit on failure.
# @param string $path A relative path.
#
# @return 1 if the path does not exist, 0 otherwise.
function realpath_check() {
  [[ ${#} -ge 1 && ${#} -le 3 ]] || exit 1

  local optionIndex
  local optionName
  local optionArgument

  local quiet=0
  local exitOnError=0
  local path=''
  local realpath=''

  # Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
  while getoptex "exit e quiet q" "${@}"; do
    # Options debuging.
    # echo "Option <$optionName> ${optionArgument:+has an arg <$optionArgument>}"

    case "${optionName}" in
      'quiet' | 'q' )
        quiet=1
        ;;

      'exit' | 'e' )
        exitOnError=1
        ;;
    esac
  done

  # Discard processed options.
  shift $((optionIndex - 1))

  path="${1}"

  realpath="$(realpath "${path}")"

  if [[ -n "${realpath}" && ! -e "${realpath}" ]]; then
    realpath=''
  fi

  if [[ -z "${realpath}" ]]; then
    [[ "${quiet}" -eq 0 ]] && cecho 'redbold' "Error: File '${path}' does not exists." >&2
    [[ "${exitOnError}" -ne 0 ]] && exit 1
    return 1
  fi

  echo -n "${realpath}"
  return 0
} # realpath_check
export -f 'realpath_check'



# Check if a binary is present. Print its path on &1 if found.
#
# @param string $binary The binaries to check, separated by ;.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
function check_binary() {
  [[ ${#} -ne 2 ]] && exit 1

  local primary
  local binaries
  local binary

  primary="${1%%;*}"
  binaries=()

  read -d ';' -r -a 'binaries' <<< "${1}"

  # Test the binary presence.
  for binary in "${binaries[@]}"; do
    if type "${binary}" &>'/dev/null'; then
      command -v "${binary}"
      return 0
    fi
  done

  cecho 'redbold' "Error: '${primary}' is missing. Please install package '${2}'." >&2
  exit 1
} # check_binary()
export -f 'check_binary'




# Check if a value is present in the array.
#
# @param string $value The checked value.
# @param array $array The searched array.
# @return 0 if the value is present, 1 if not.
function in_array() {
  [[ ${#} -eq 0 ]] && exit 1

  local value="${1}"

  shift

  local array=( "${@}" )

  printf '%s\n' "${array[@]}" | grep --quiet --regexp="^${value}$"

  return "${?}"
} # in_array()
export -f 'in_array'



# Echo text in color.
#
# Colors definitions.
# See http://mywiki.wooledge.org/BashFAQ/037
#
# @param string $color Color and weight for text. (boldgreen for example).
# @param string $text The text to echo (and echo options).
function cecho() {
  if [[ ${#} -lt 2 ]]; then
    echo "${@}"
    return 0
  fi

  local color="${1}"

  # remove color information from arguments.
  shift 1

  # Check that the output is to a terminal.
  if [[ ! -t 1 ]]; then
    # Not outputing to a terminal, discaring colors.
    echo "${@}"
    return 0
  fi

  local key

  # Bash 4 version with associative array.
  ## Color and weight definitions.
  #declare -A font
  #font['black']="$(tput 'setaf' 0)"
  #font['red']="$(tput 'setaf' 1)"
  #font['green']="$(tput 'setaf' 2)"
  #font['yellow']="$(tput 'setaf' 3)"
  #font['blue']="$(tput 'setaf' 4)"
  #font['magenta']="$(tput 'setaf' 5)"
  #font['cyan']="$(tput 'setaf' 6)"
  #font['white']="$(tput 'setaf' 7)"

  #font['bgBlack']="$(tput 'setab' 0)"
  #font['bgRed']="$(tput 'setab' 1)"
  #font['bgGreen']="$(tput 'setab' 2)"
  #font['bgYellow']="$(tput 'setab' 3)"
  #font['bgBlue']="$(tput 'setab' 4)"
  #font['bgMagenta']="$(tput 'setab' 5)"
  #font['bgCyan']="$(tput 'setab' 6)"
  #font['bgWhite']="$(tput 'setab' 7)"

  #font['bold']="$(tput 'bold')"
  #font['stout']="$(tput 'smso')" # Standout.
  #font['under']="$(tput 'smul')" # Underline.
  #font['blink']="$(tput 'blink')" # Blinking
  #font['italic']="$(tput 'sitm')"

  ## Parse the color string.
  #for key in "${!font[@]}"; do
  #  [[ "${color}" = *"${key}"* ]] && echo -n "${font[${key}]}"
  #done

  declare -a fontIndex
  declare -a fontValue

  fontIndex=()
  fontValue=()

  fontIndex+=( 'black' );     fontValue+=( "$(tput 'setaf' 0)" )
  fontIndex+=( 'red' );       fontValue+=( "$(tput 'setaf' 1)" )
  fontIndex+=( 'green' );     fontValue+=( "$(tput 'setaf' 2)" )
  fontIndex+=( 'yellow' );    fontValue+=( "$(tput 'setaf' 3)" )
  fontIndex+=( 'blue' );      fontValue+=( "$(tput 'setaf' 4)" )
  fontIndex+=( 'magenta' );   fontValue+=( "$(tput 'setaf' 5)" )
  fontIndex+=( 'cyan' );      fontValue+=( "$(tput 'setaf' 6)" )
  fontIndex+=( 'white' );     fontValue+=( "$(tput 'setaf' 7)" )

  fontIndex+=( 'bgBlack' );   fontValue+=( "$(tput 'setab' 0)" )
  fontIndex+=( 'bgRed' );     fontValue+=( "$(tput 'setab' 1)" )
  fontIndex+=( 'bgGreen' );   fontValue+=( "$(tput 'setab' 2)" )
  fontIndex+=( 'bgYellow' );  fontValue+=( "$(tput 'setab' 3)" )
  fontIndex+=( 'bgBlue' );    fontValue+=( "$(tput 'setab' 4)" )
  fontIndex+=( 'bgMagenta' ); fontValue+=( "$(tput 'setab' 5)" )
  fontIndex+=( 'bgCyan' );    fontValue+=( "$(tput 'setab' 6)" )
  fontIndex+=( 'bgWhite' );   fontValue+=( "$(tput 'setab' 7)" )

  fontIndex+=( 'bold' );      fontValue+=( "$(tput 'bold')" )
  fontIndex+=( 'stout' );     fontValue+=( "$(tput 'smso')" ) # Standout.
  fontIndex+=( 'under' );     fontValue+=( "$(tput 'smul')" ) # Underline.
  fontIndex+=( 'blink' );     fontValue+=( "$(tput 'blink')" ) # Blinking.
  fontIndex+=( 'italic' );    fontValue+=( "$(tput 'sitm')" )

  for key in "${!fontIndex[@]}"; do
    [[ "${color}" = *"${fontIndex[${key}]}"* ]] && echo -n "${fontValue[${key}]}"
  done

  # Output the text.
  echo "${@}"

  # Reset all attributes.
  tput 'sgr0'

  return 0
} # cecho()
export -f 'cecho'



# Extract mysqldump file header (aka. default dump settings).
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output.
# @param string $defaultOutput The default output.
# @param string $mysqldumpFile The mysqldump input.
#
# @return 1 on failure, 0 on success.
function extractHeader() {
  [[ ${#} -ne 4 ]] && exit 1

  local quiet="${1}"
  local verbose="${2}"

  local defaultOutput="${3}"
  local mysqldumpFile="${4}"

  [[ "${quiet}" -eq 0 ]] && echo -n "Extracting header..." >&2
  if head -n 50 "${mysqldumpFile}" \
      | sed -n -e "0,/-- .* structure/p" \
      | head -n -2 >> "${defaultOutput}"; then
    [[ "${quiet}" -eq 0 ]] && cecho 'green' "Success." >&2
  else
    [[ "${quiet}" -eq 0 ]] && cecho 'red' "Failure." >&2
  fi

  return 0
} # extractHeader()
export -f 'extractHeader'



# Extract mysqldump file footer (aka. restore previous settings).
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output.
# @param string $defaultOutput The default output.
# @param string $mysqldumpFile The mysqldump input.
#
# @return 1 on failure, 0 on success.
function extractFooter() {
  [[ ${#} -ne 4 ]] && exit 1

  local quiet="${1}"
  local verbose="${2}"

  local defaultOutput="${3}"
  local mysqldumpFile="${4}"

  [[ "${quiet}" -eq 0 ]] && echo -n "Extracting footer..." >&2
  if tail -n 25 "${mysqldumpFile}" \
      | sed  -n -e "/^UNLOCK TABLES;$/,/-- Dump completed.*$/p" \
      | tail -n +2  >> "${defaultOutput}"; then
    [[ "${quiet}" -eq 0 ]] && cecho 'green' "Success." >&2
  else
    [[ "${quiet}" -eq 0 ]] && cecho 'red' "Failure." >&2
  fi

  return 0
} # extractHeader()
export -f 'extractFooter'



# Extract tables related queries from mysqldump file.
# @see https://stackoverflow.com/questions/1013852/can-i-restore-a-single-table-from-a-full-mysql-mysqldump-file
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output.
# @param string $defaultOutput The default output.
# @param string $mysqldumpFile The mysqldump input.
# @param string[] $extractedTables[] Names of the tables to extract.
#
# @return 1 on failure, 0 on success.
function extractTables() {
  [[ ${#} -lt 5 ]] && exit 1

  local quiet="${1}"
  local verbose="${2}"

  local defaultOutput="${3}"
  local mysqldumpFile="${4}"
  shift 4
  local extractedTables=( "${@}" )
  local table=''


  for table in "${extractedTables[@]}"; do

    [[ "${quiet}" -eq 0 ]] && echo -n "Extracting table '${table}'..." >&2
    if sed -n -e "/-- Table structure for table \`${table}\`/,/UNLOCK TABLES/p" "${mysqldumpFile}" >> "${defaultOutput}"; then
      [[ "${quiet}" -eq 0 ]] && cecho 'green' "Success." >&2
    else
      [[ "${quiet}" -eq 0 ]] && cecho 'red' "Failure." >&2
    fi

  done

  return 0
} # extractTables()
export -f 'extractTables'


#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex()
{
  (( $# )) || return 1
  local optionList
  optionList="${1#;}"
  (( optionIndex )) || optionIndex=1
  [[ ${optionIndex} -lt $# ]] || return 1
  shift ${optionIndex}
  if [[ "${1}" != "-" && "${1}" != "${1#-}" ]]; then
    optionIndex=$((optionIndex + 1)); if [[ "${1}" != "--" ]]; then
    local o
    o="-${1#-${optionOfs}}"
    for opt in ${optionList#;}
    do
      optionName="${opt%[;.:]}"
      unset optionArgument
      local optionType="${opt##*[^;:.]}"
      [[ -z "${optionType}" ]] && optionType=";"
      if [[ ${#optionName} -gt 1 ]]; then
        # long-named option
        case "$o" in
          "--${optionName}")
            if [[ "${optionType}" != ":" ]]; then
              return 0
            fi
            optionArgument="$2"
            if [[ -z "${optionArgument}" ]]; then
              # error: must have an agrument
              echo "$0: error: ${optionName} must have an argument" >&2
              optionArgument="${optionName}";
              optionName="?"
              return 1;
            fi
            optionIndex=$((optionIndex + 1)) # skip option's argument
            return 0
          ;;
          "--${optionName}="*)
            if [[ "${optionType}" = ";" ]];
            then  # error: must not have arguments
              (( OPTERR )) && echo "$0: error: ${optionName} must not have arguments" >&2
              optionArgument="${optionName}"
              optionName="?"
              return 1
            fi
            optionArgument=${o#--${optionName}=}
            return 0
          ;;
        esac
      else # short-named option
        case "$o" in
          "-${optionName}")
            unset optionOfs
            [[ "${optionType}" != ":" ]] && return 0
            optionArgument="$2"
            if [[ -z "${optionArgument}" ]]; then
              echo "$0: error: -${optionName} must have an argument" >&2
              optionArgument="${optionName}"
              optionName="?"
              return 1
            fi
            optionIndex=$(( optionIndex + 1 )) # skip option's argument
            return 0
          ;;
          "-${optionName}"*)
            if [ ${optionType} = ";" ]
            then # an option with no argument is in a chain of options
              optionOfs="${optionOfs}?" # move to the next option in the chain
              optionIndex=$(( optionIndex - 1 )) # the chain still has other options
              return 0
            else
              unset optionOfs
              optionArgument="${o#-${optionName}}"
              return 0
            fi
          ;;
        esac
      fi
    done
    echo "Error : invalid option : '${o}'." >&2
    usage 1
  fi; fi
  optionName="?"
  unset optionArgument
  return 1
}

function optionListex
{
  local l="${1}"
  local m # mask
  local r # to store result
  while [[ ${#m} -lt $((${#l}-1)) ]]; do m="$m?"; done # create a "???..." mask
  while [[ -n "$l" ]]
  do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [[ -n "${l%%[^:.;]*}" ]]
    then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo "${r}"
}

function getopt()
{
  local optionList

  optionList="$(optionListex "${1}")"
  shift
  getoptex "${optionList}" "${@}"
  return ${?}
}

#######################################################################################
#######################################################################################
#######################################################################################

# Check for binaries presence
check_binary 'basename' 'coreutils' >'/dev/null'
check_binary 'dirname' 'coreutils' >'/dev/null'
check_binary 'mktemp' 'mktemp' >'/dev/null'
check_binary 'sed' 'sed' >'/dev/null'

# Application defaults
quiet=0
verbose=0

mysqldumpFile='/dev/stdin'
defaultOutput='/dev/stdout'

declare -a 'extractedTables'
extractedTables=()

# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help h quiet q verbose v output: o: table: t:" "${@}"; do
  # Options debuging.
  # echo "Option <$optionName> ${optionArgument:+has an arg <$optionArgument>}"

  case "${optionName}" in
    'output' | 'o' )
      defaultOutput="${optionArgument}"
      ;;

    'table' | 't' )
      extractedTables+=( "${optionArgument}" )
      ;;

    'quiet' | 'q' )
      quiet=1
      ;;

    'verbose' | 'v' )
      verbose=1
      ;;

    'help' | 'h' | * )
      usage 0
  ;;
  esac
done

shift $((optionIndex - 1))

[[ -n "${1}" ]] && mysqldumpFile="$(realpath_check ${1})"

# Can't be quiet when verbose.
[[ "${verbose}" -ne 0 ]] && quiet=0

# Initializing output file.
echo '' > "${defaultOutput}"

extractHeader "${quiet}" "${verbose}" "${defaultOutput}" "${mysqldumpFile}"
extractTables "${quiet}" "${verbose}" "${defaultOutput}" "${mysqldumpFile}" "${extractedTables[@]}"
extractFooter "${quiet}" "${verbose}" "${defaultOutput}" "${mysqldumpFile}"

exit 0