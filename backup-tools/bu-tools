#!/bin/bash
#
# Backup management tool for backup solutions such as Backup Manager.
# This script is a rewriting of backup-manager-tools with the hope
# to support various backup tools in the future.
# It hope to provide a unique command line to manage backup targets
# idependently of the backup solution used.
#
# For suggestion and bug reports, please contact
# Pierre-Yves Landuré <pierre-yves dot landure at biapy dot fr>
#
# upstreamUrl="https://raw.githubusercontent.com/biapy/howto.biapy.com/master/backup-tools/bu-tools"

version="1.0.1"

# History
# -------
#
# 1.0.1
#  - Fix help contents
#
# 1.0.0
#  - Initial release, rewriten from backup-manager-tools
#



# Get the basename of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function basename() {

  [[ ${#} -eq 0 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      command basename -z -- "${@}" \
        | command tr -d '\0'
      ;;
    'Darwin' | * )
      command basename -- "${@}"
      ;;
  esac

  return ${?}
} # basename()
export -f 'basename'



# Get the absolute path for a file or directory.
# Print its path on &1 if found.
#
# @param string $path A relative path.
#
# @return ${realpath} A absolute path.
function realpath() {
  [[ ${#} -ne 1 ]] && exit 1

  local realpath

  case "$(uname)" in
    'Linux' )
      realpath="$(readlink -f "${1}")"
      ;;
    'Darwin' )
      realpath="$(stat -f '%N' "${1}")"
      ;;
    * )
      realpath="$(realpath "${1}")"
      ;;
  esac

  echo -n "${realpath}"
  return 0
} # realpath



scriptName="$(basename "${0}")"



# Print this script help.
function usage {
  echo "Backup Tools v${version}
This script automates management of backup targets for these backup softwares:
  * Backup Manager (backup-manager).

Usage :

  ${scriptName} [ --help ] [ --quiet ] [ --verbose ]
     { --list | -l } { --cleanup | -c }
     { --add='/path/to/backup' } { --remove='/path/to/remove/from/backup' }

  Available options are :
    * --help | -h     : Display this message.
    * --quiet | -q    : Disable almost all outputs.
    * --verbose | -v  : Enable debug outputs.
    * --list | l      : List currently backed-up paths, one per line.
    * --add | -a      : Add a path to backup targets.
    * --remove | -r   : Remove a path from backup targets.
    * --cleanup | -c  : Remove missing paths from backup targets.
"

  [[ -n "${1}" ]] && exit "${1}"
} # usage



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
# Print its path on &1 if found.
#
# @param string $quiet A optionnal '--quiet' tag to disable the error message.
# @param string $exit A optionnal '--exit' tag to enable exit on failure.
# @param string $path A relative path.
#
# @return 1 if the path does not exist, 0 otherwise.
function realpath_check() {
  [[ ${#} -ge 1 && ${#} -le 3 ]] || exit 1

  local optionIndex
  local optionName
  local optionValue

  local quiet=0
  local exitOnError=0
  local path=''
  local realpath=''

  # Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
  while getoptex "exit e quiet q" "${@}"; do
    # Options debuging.
    # echo "Option <$optionName> ${optionArgument:+has an arg <$optionArgument>}"

    case "${optionName}" in
      'quiet' | 'q' )
        quiet=1
        ;;

      'exit' | 'e' )
        exitOnError=1
        ;;
    esac
  done

  # Discard processed options.
  shift $((optionIndex - 1))

  path="${1}"

  realpath="$(realpath "${path}")"

  if [[ -n "${realpath}" && ! -e "${realpath}" ]]; then
    realpath=''
  fi

  if [[ -z "${realpath}" ]]; then
    [[ "${quiet}" -eq 0 ]] && cecho 'redbold' "Error: File '${path}' does not exists." >&2
    [[ "${exitOnError}" -ne 0 ]] && exit 1
    return 1
  fi

  echo -n "${realpath}"
  return 0
} # realpath_check
export -f 'realpath_check'



# Check if a binary is present. Print its path on &1 if found.
#
# @param string $binary The binaries to check, separated by ;.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
function check_binary() {
  [[ ${#} -ne 2 ]] && exit 1

  local primary
  local binaries
  local binary

  primary="${1%%;*}"
  binaries=()

  read -d ';' -r -a binaries <<< "${1}"

  # Test the binary presence.
  for binary in "${binaries[@]}"; do
    if type "${binary}" &>'/dev/null'; then
      command -v "${binary}"
      return 0
    fi
  done

  cecho 'redbold' "Error: '${primary}' is missing. Please install package '${2}'." >&2
  exit 1
} # check_binary()
export -f 'check_binary'



# Check if a value is present in the array.
#
# @param string $value The checked value.
# @param array $array The searched array.
# @return 0 if the value is present, 1 if not.
function in_array() {
  [[ ${#} -eq 0 ]] && exit 1

  local value="${1}"

  shift

  local array=( "${@}" )

  printf '%s\n' "${array[@]}" | grep --quiet --regexp="^${value}$"

  return "${?}"
} # in_array()
export -f 'in_array'



# Echo text in color.
#
# Colors definitions.
# See http://mywiki.wooledge.org/BashFAQ/037
#
# @param string $color Color and weight for text. (boldgreen for example).
# @param string $text The text to echo (and echo options).
function cecho() {
  if [[ ${#} -lt 2 ]]; then
    echo "${@}"
    return 0
  fi

  local color="${1}"

  # remove color information from arguments.
  shift 1

  # Check that the output is to a terminal.
  if [[ ! -t 1 ]]; then
    # Not outputing to a terminal, discaring colors.
    echo "${@}"
    return 0
  fi

  local key

  # Bash 4 version with associative array.
  ## Color and weight definitions.
  #declare -A font
  #font['black']="$(tput 'setaf' 0)"
  #font['red']="$(tput 'setaf' 1)"
  #font['green']="$(tput 'setaf' 2)"
  #font['yellow']="$(tput 'setaf' 3)"
  #font['blue']="$(tput 'setaf' 4)"
  #font['magenta']="$(tput 'setaf' 5)"
  #font['cyan']="$(tput 'setaf' 6)"
  #font['white']="$(tput 'setaf' 7)"

  #font['bgBlack']="$(tput 'setab' 0)"
  #font['bgRed']="$(tput 'setab' 1)"
  #font['bgGreen']="$(tput 'setab' 2)"
  #font['bgYellow']="$(tput 'setab' 3)"
  #font['bgBlue']="$(tput 'setab' 4)"
  #font['bgMagenta']="$(tput 'setab' 5)"
  #font['bgCyan']="$(tput 'setab' 6)"
  #font['bgWhite']="$(tput 'setab' 7)"

  #font['bold']="$(tput 'bold')"
  #font['stout']="$(tput 'smso')" # Standout.
  #font['under']="$(tput 'smul')" # Underline.
  #font['blink']="$(tput 'blink')" # Blinking
  #font['italic']="$(tput 'sitm')"

  ## Parse the color string.
  #for key in "${!font[@]}"; do
  #  [[ "${color}" = *"${key}"* ]] && echo -n "${font[${key}]}"
  #done

  declare -a fontIndex
  declare -a fontValue

  fontIndex=()
  fontValue=()

  fontIndex+=( 'black' );     fontValue+=( "$(tput 'setaf' 0)" )
  fontIndex+=( 'red' );       fontValue+=( "$(tput 'setaf' 1)" )
  fontIndex+=( 'green' );     fontValue+=( "$(tput 'setaf' 2)" )
  fontIndex+=( 'yellow' );    fontValue+=( "$(tput 'setaf' 3)" )
  fontIndex+=( 'blue' );      fontValue+=( "$(tput 'setaf' 4)" )
  fontIndex+=( 'magenta' );   fontValue+=( "$(tput 'setaf' 5)" )
  fontIndex+=( 'cyan' );      fontValue+=( "$(tput 'setaf' 6)" )
  fontIndex+=( 'white' );     fontValue+=( "$(tput 'setaf' 7)" )

  fontIndex+=( 'bgBlack' );   fontValue+=( "$(tput 'setab' 0)" )
  fontIndex+=( 'bgRed' );     fontValue+=( "$(tput 'setab' 1)" )
  fontIndex+=( 'bgGreen' );   fontValue+=( "$(tput 'setab' 2)" )
  fontIndex+=( 'bgYellow' );  fontValue+=( "$(tput 'setab' 3)" )
  fontIndex+=( 'bgBlue' );    fontValue+=( "$(tput 'setab' 4)" )
  fontIndex+=( 'bgMagenta' ); fontValue+=( "$(tput 'setab' 5)" )
  fontIndex+=( 'bgCyan' );    fontValue+=( "$(tput 'setab' 6)" )
  fontIndex+=( 'bgWhite' );   fontValue+=( "$(tput 'setab' 7)" )

  fontIndex+=( 'bold' );      fontValue+=( "$(tput 'bold')" )
  fontIndex+=( 'stout' );     fontValue+=( "$(tput 'smso')" ) # Standout.
  fontIndex+=( 'under' );     fontValue+=( "$(tput 'smul')" ) # Underline.
  fontIndex+=( 'blink' );     fontValue+=( "$(tput 'blink')" ) # Blinking.
  fontIndex+=( 'italic' );    fontValue+=( "$(tput 'sitm')" )

  for key in "${!fontIndex[@]}"; do
    [[ "${color}" = *"${fontIndex[${key}]}"* ]] && echo -n "${fontValue[${key}]}"
  done

  # Output the text.
  echo "${@}"

  # Reset all attributes.
  tput 'sgr0'

  return 0
} # cecho()
export -f 'cecho'



# Process targets before updating backup software configuration.
# Remove duplicates and sort by name.
# Print unique sorted targets, one target per line.
#
# @param string[] $targets
# @return 1 if error, 0 otherwise.
function common_preSetTargets()
{
  local targets=( "${@}" )

  printf '%s\n' "${targets[@]}" | sort --unique

  return "${?}"
}
export -f 'common_preSetTargets'



# Add backup targets for all softwares.
#
# @param string $softwareCode A software code used to create function calls.
# @param string $softwareName A software name displayed to the user.
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @param string[] $addedTargets[] An array of paths to backup
# @return 1 if error, 0 if success.
function common_add() {
  [[ ${#} -lt 4 ]] && exit 1

  local softwareCode="${1}"
  local softwareName="${2}"
  local quiet="${3}"
  local verbose="${4}"

  # Discard processed options.
  shift 4

  local addedTargets=( "${@}" )
  local currentTargets=()

  [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: ${softwareName} : Adding ${#addedTargets[@]} targets." >&2

  "${softwareCode}_check" "${quiet}" "${verbose}" 1

  mapfile -t currentTargets <<< "$("${softwareCode}_list" '1' '0')"

  for target in "${addedTargets[@]}"; do
    if in_array "${target}" "${currentTargets[@]}"; then
      [[ "${quiet}" -eq 0 ]] && cecho 'yellow' "Warning: ${softwareName} : '${target}' is already backed-up." >&2
    else
      [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: ${softwareName} : '${target}' added." >&2
      currentTargets+=( "${target}" )
    fi
  done

  "${softwareCode}_setTargets" "${quiet}" "${verbose}" "${currentTargets[@]}"

  return "${?}"
} #common_add()
export -f 'common_add'



# Remove backup targets for all softwares.
#
# @param string $softwareCode A software code used to create function calls.
# @param string $softwareName A software name displayed to the user.
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @param string[] $removedTargets[] An array of paths to remove from backup
# @return 1 if error, 0 if success.
function common_remove() {
  [[ ${#} -lt 4 ]] && exit 1

  local softwareCode="${1}"
  local softwareName="${2}"
  local quiet="${3}"
  local verbose="${4}"

  # Discard processed options.
  shift 4

  local removedTargets=( "${@}" )
  local currentTargets=()
  local currentTargetsString=''
  local targetVersions=()
  local removed=0

  [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: ${softwareName} : Removing ${#removedTargets[@]} targets." >&2

  "${softwareCode}_check" "${quiet}" "${verbose}" 1

  currentTargetsString="$("${softwareCode}_list" '1' '0')"

  for target in "${removedTargets[@]}"; do
    removed=0

    targetVersions=( "${target}" "$(realpath "${target}")" )

    for testedTarget in "${targetVersions[@]}"; do
      if grep --quiet --regexp="^${testedTarget}$" <<< "${currentTargetsString}"; then
        [[ "${quiet}" -eq 0 ]] && cecho 'blue' "Info: ${softwareName} : '${testedTarget}' removed from backup targets." >&2

        currentTargetsString="$(sed -e "/^${testedTarget//\//\\\/}$/d" <<< "${currentTargetsString}")"
        removed=1
      fi
    done

    if [[ "${removed}" -eq 0 && "${quiet}" -eq 0 ]]; then
      cecho 'yellow' "Warning: ${softwareName} : '${target}' is not a backup target." >&2
    fi
  done

  if [[ -n "${currentTargetsString}" ]]; then
    mapfile -t currentTargets <<< "${currentTargetsString}"
  else
    currentTargets=()
  fi

  "${softwareCode}_setTargets" "${quiet}" "${verbose}" "${currentTargets[@]}"

  return "${?}"
} #common_remove()
export -f 'common_remove'



# Clean-up backup targets for all softwares.
#
# @param string $softwareCode A software code used to create function calls.
# @param string $softwareName A software name displayed to the user.
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @return 1 if error, 0 if success.
function common_cleanup() {
  [[ ${#} -lt 4 ]] && exit 1

  local softwareCode="${1}"
  local softwareName="${2}"
  local quiet="${3}"
  local verbose="${4}"

  local currentTargets=()
  local cleanedTargets=()

  local removeCount=0
  local realTarget=''

  [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: ${softwareName} : Cleaning-up targets." >&2

  "${softwareCode}_check" "${quiet}" "${verbose}" 1

  mapfile -t currentTargets <<< "$("${softwareCode}_list" '1' '0')"

  for target in "${currentTargets[@]}"; do
    if [[ -n "${target}" ]]; then
      [[ "${verbose}" -ne 0 ]] && cecho 'blue' -n "Info: ${softwareName} : Checking target '${target}' ... " >&2

      if realTarget="$(realpath_check --quiet "${target}")"; then
        [[ "${verbose}" -ne 0 ]] && cecho 'green' "Ok" >&2

        cleanedTargets+=( "${realTarget}" )

        # TODO : check for targets path contained in other targets.
      else
        [[ "${verbose}" -ne 0 ]] && cecho 'yellow' "removed (path not found)" >&2
        [[ "${quiet}" -eq 0 && "${verbose}" -eq 0 ]] && cecho 'yellow' "Info: ${softwareName} : '${target}' removed (path not found)." >&2

        (( removeCount++ ))
      fi
    fi
  done

  [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: ${softwareName} : ${removeCount} targets removed by clean-up." >&2

  "${softwareCode}_setTargets" "${quiet}" "${verbose}" "${cleanedTargets[@]}"

  return "${?}"
} #common_cleanup()
export -f 'common_cleanup'



# Check for backup-manager software presence.
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output.
# @param bool $exitOnError 1 to enable exit on error.
# @return 1 if error, 0 if success.
function backupManager_check() {
  local quiet="${1}"
  local verbose="${2}"
  local exitOnError=0

  [[ "${3}" -ne 0 ]] && exitOnError=1


  if [[ -x '/usr/sbin/backup-manager' && -e '/etc/backup-manager.conf' ]]; then
    return 0
  fi

  # Backup Manager is not installed.
  [[ "${quiet}" -eq 0 ]] && cecho 'red' 'Error: Backup Manager is not installed.' >&2

  [[ "${exitOnError}" -ne 0 ]] && exit 1

  return 1
} # backupManager_check()
export -f 'backupManager_check'



# Set backup-manager targets
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output.
# @param string[] $targets[] An array of backup target paths.
# @return 1 if error, 0 if success.
function backupManager_setTargets() {
  local quiet="${1}"
  local verbose="${2}"

  # Discard processed options.
  shift 2

  local targets=( "${@}" )
  local confContent=''
  local confLine=''
  local counter=0

  backupManager_check "${quiet}" "${verbose}" 1

  # Remove duplicates and sort targets.
  mapfile -t targets <<< "$(common_preSetTargets "${targets[@]}")"

  if grep -q '^export BM_TARBALL_DIRECTORIES=' '/etc/backup-manager.conf'; then
    # Update BM_TARBALL_DIRECTORIES value.
    IFS=' ' backupManager_setOption "${quiet}" "${verbose}" 'BM_TARBALL_DIRECTORIES' "${targets[*]}"
  elif grep -q '^export BM_TARBALL_TARGETS' '/etc/backup-manager.conf'; then
    # Update BM_TARBALL_TARGETS.
    [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: Backup Manager : updating BM_TARBALL_TARGETS value." >&2

    [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: Backup Manager : removing existing BM_TARBALL_TARGETS values." >&2
    # Removing existing configuration (to be replaced).
    sed -i -e '/^BM_TARBALL_TARGETS/d' '/etc/backup-manager.conf'

    [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: Backup Manager : adding updated BM_TARBALL_TARGETS values." >&2

    # Building the inserted content.
    confContent=''
    counter=0
    for target in "${targets[@]}"; do
      if [[ -n "${target}" ]]; then
        confLine="BM_TARBALL_TARGETS[${counter}]=\"${target}\""

        if [[ -n "${confContent}" ]]; then
          confContent="${confContent}\\
${confLine}"
        else
          confContent="${confLine}"
        fi
      fi

      (( counter++ ))
    done

    # Inserting the content in configuration file.
    if [[ -n "${confContent}" ]]; then
      sed -i -e "/^export BM_TARBALL_TARGETS/i\
${confContent}" \
          '/etc/backup-manager.conf'
    fi

  else
    cecho 'red' 'Error: in /etc/backup-manager.conf, unable to detect BM_TARBALL_DIRECTORIES or BM_TARBALL_TARGETS.' >&2
    return 1
  fi

} # backupManager_setTargets()
export -f 'backupManager_setTargets'



# List backup targets for backup-manager software.
# Output a list of backed-up paths, one path per line.
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @return 1 if error, 0 if success.
function backupManager_list() {
  local quiet="${1}"
  local verbose="${2}"
  local backupDirectories=()
  local backupTargets=()
  local targetsList=()

  backupManager_check "${quiet}" "${verbose}" 1

  IFS=' ' read -r -a 'backupDirectories' \
    <<< "$(grep '^export BM_TARBALL_DIRECTORIES=' '/etc/backup-manager.conf' \
      | sed -e 's/^.*DIRECTORIES="\(.*\)".*$/\1/')"

  mapfile -t 'backupTargets' \
    <<< "$(grep '^BM_TARBALL_TARGETS\[' '/etc/backup-manager.conf' \
      | sed -e 's/^.*TARGETS\[[^]]*\]="\([^"]*\)".*$/\1/')"

  # Create true empty array if backupTargets only contains a zero length string.
  [[ -z "${backupTargets[*]}" ]] && backupTargets=()

  targetsList=( "${backupDirectories[@]}" "${backupTargets[@]}" )

  [[ ${#targetsList[@]} -ne 0 ]] && printf '%s\n' "${targetsList[@]}"

  return 0
} #backupManager_list()
export -f 'backupManager_list'



# Add backup targets for backup-manager software.
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @param string[] $addedTargets[] An array of paths to backup
# @return 1 if error, 0 if success.
function backupManager_add() {
  common_add 'backupManager' 'Backup Manager' "${@}"

  return "${?}"
} #backupManager_add()
export -f 'backupManager_add'



# Remove backup targets for backup-manager software.
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @param string[] $removedTargets[] An array of paths to remove from backup
# @return 1 if error, 0 if success.
function backupManager_remove() {
  common_remove 'backupManager' 'Backup Manager' "${@}"

  return "${?}"
} #backupManager_remove()
export -f 'backupManager_remove'



# Clean-up backup targets for backup-manager software.
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @return 1 if error, 0 if success.
function backupManager_cleanup() {
  common_cleanup 'backupManager' 'Backup Manager' "${@}"

  return "${?}"
} #backupManager_cleanup()
export -f 'backupManager_cleanup'



# Set configuration option for backup-manager software.
# Does not support options with an array format.
# Update /etc/backup-manager.conf contents.
#
# @param bool $quiet 1 to quiet output.
# @param bool $verbose 1 to enable verbose output
# @param string $optionName The option name
# @param string $optionValue The option value
# @return 1 if error, 0 if success.
function backupManager_setOption() {
  [[ ${#} -lt 4 ]] && exit 1

  local quiet="${1}"
  local verbose="${2}"
  local optionName="${3}"
  local optionValue="${4}"

  # Test if option exists.
  if grep -q "^export ${optionName}=" '/etc/backup-manager.conf'; then
    [[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: Backup Manager : updating '${optionName}' value." >&2

    sed -i \
      -e "s|[#]*\(.*${optionName}=\).*$|\1\"${optionValue}\"|" \
      '/etc/backup-manager.conf'

    return "${?}"
  fi

  cecho 'red' "Error: Backup Manager : Option '${optionName}' does not exists." >&2
  return 1
} #backupManager_setOption()
export -f 'backupManager_setOption'

#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex()
{
  (( $# )) || return 1
  local optionList
  optionList="${1#;}"
  (( optionIndex )) || optionIndex=1
  [[ ${optionIndex} -lt $# ]] || return 1
  shift ${optionIndex}
  if [[ "${1}" != "-" && "${1}" != "${1#-}" ]]; then
    optionIndex=$((optionIndex + 1)); if [[ "${1}" != "--" ]]; then
    local o
    o="-${1#-${optionOfs}}"
    for opt in ${optionList#;}
    do
      optionName="${opt%[;.:]}"
      unset optionArgument
      local optionType="${opt##*[^;:.]}"
      [[ -z "${optionType}" ]] && optionType=";"
      if [[ ${#optionName} -gt 1 ]]; then
        # long-named option
        case "$o" in
          "--${optionName}")
            if [[ "${optionType}" != ":" ]]; then
              return 0
            fi
            optionArgument="$2"
            if [[ -z "${optionArgument}" ]]; then
              # error: must have an agrument
              echo "$0: error: ${optionName} must have an argument" >&2
              optionArgument="${optionName}";
              optionName="?"
              return 1;
            fi
            optionIndex=$((optionIndex + 1)) # skip option's argument
            return 0
          ;;
          "--${optionName}="*)
            if [[ "${optionType}" = ";" ]];
            then  # error: must not have arguments
              (( OPTERR )) && echo "$0: error: ${optionName} must not have arguments" >&2
              optionArgument="${optionName}"
              optionName="?"
              return 1
            fi
            optionArgument=${o#--${optionName}=}
            return 0
          ;;
        esac
      else # short-named option
        case "$o" in
          "-${optionName}")
            unset optionOfs
            [[ "${optionType}" != ":" ]] && return 0
            optionArgument="$2"
            if [[ -z "${optionArgument}" ]]; then
              echo "$0: error: -${optionName} must have an argument" >&2
              optionArgument="${optionName}"
              optionName="?"
              return 1
            fi
            optionIndex=$(( optionIndex + 1 )) # skip option's argument
            return 0
          ;;
          "-${optionName}"*)
            if [ ${optionType} = ";" ]
            then # an option with no argument is in a chain of options
              optionOfs="${optionOfs}?" # move to the next option in the chain
              optionIndex=$(( optionIndex - 1 )) # the chain still has other options
              return 0
            else
              unset optionOfs
              optionArgument="${o#-${optionName}}"
              return 0
            fi
          ;;
        esac
      fi
    done
    echo "Error : invalid option : '${o}'." >&2
    usage 1
  fi; fi
  optionName="?"
  unset optionArgument
  return 1
}

function optionListex
{
  local l="${1}"
  local m # mask
  local r # to store result
  while [[ ${#m} -lt $((${#l}-1)) ]]; do m="$m?"; done # create a "???..." mask
  while [[ -n "$l" ]]
  do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [[ -n "${l%%[^:.;]*}" ]]
    then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo "${r}"
}

function getopt()
{
  local optionList

  optionList="$(optionListex "${1}")"
  shift
  getoptex "${optionList}" "${@}"
  return ${?}
}

#######################################################################################
#######################################################################################
#######################################################################################

# Check for binaries presence
check_binary "basename" "coreutils" > '/dev/null'
check_binary "dirname" "coreutils" > '/dev/null'
check_binary "mktemp" "mktemp" > '/dev/null'
check_binary "sed" "sed" > '/dev/null'
check_binary "wget" "wget" > '/dev/null'
check_binary "dpkg" "dpkg" > '/dev/null'

declare -a supportedBackupSoftwares
declare -a backupSoftwares
declare -a addList
declare -a removeList

supportedBackupSoftwares=( 'backupManager' )
backupSoftwares=()
addList=()
removeList=()

cleanup=0
list=0
quiet=0
verbose=0

# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help h quiet q verbose v list l add: a: remove: r: cleanup c" "${@}"; do
  # Options debuging.
  # echo "Option <$optopt> ${optarg:+has an arg <$optarg>}"

  case "${optionName}" in
    'add' | 'a' )
      # option argument is a path. Check if it exists.
      if backupTarget="$(realpath_check "${optionArgument}")"; then
        addList+=( "${backupTarget}" )
      fi
      ;;

    'remove' | 'r' )
      removeList+=( "${optionArgument}" )
      ;;

    'list' | 'l' )
      list=1
      ;;

    'cleanup' | 'c' )
      cleanup=1
      ;;

    'quiet' | 'q' )
      quiet=1
      ;;

    'verbose' | 'v' )
      verbose=1
      ;;

    'help' | 'h' | * )
      usage 0
      ;;
  esac
done

# Discard processed options.
shift $((optionIndex - 1))

if [[ "${verbose}" -ne 0 ]]; then
  quiet=0
fi

# Test for available backup softwares.
for backupSoftware in "${supportedBackupSoftwares[@]}"; do
  [[ "${verbose}" -ne 0 ]] && cecho 'blue' -n "Info: checking for '${backupSoftware}' presence..." >&2
  if "${backupSoftware}_check" 1 0 0; then
    backupSoftwares+=( 'backupManager' )
    [[ "${verbose}" -ne 0 ]] && cecho 'green' 'found' >&2
  else
    [[ "${verbose}" -ne 0 ]] && cecho 'yellow' 'not found' >&2
  fi
done

[[ "${verbose}" -ne 0 ]] && cecho 'blue' "Info: ${#backupSoftwares[@]} supported backup softwares found." >&2

if [[ ${#backupSoftwares[@]} -eq 0 ]]; then
  [[ "${quiet}" -eq 0 ]] && cecho 'red' 'Error: no supported backup software found.' >&2
  exit 1
fi

if [[ ${#addList[@]} -ne 0 ]]; then
  for backupSoftware in "${backupSoftwares[@]}"; do
    "${backupSoftware}_add" "${quiet}" "${verbose}" "${addList[@]}"
  done
fi

if [[ ${#removeList[@]} -ne 0 ]]; then
  for backupSoftware in "${backupSoftwares[@]}"; do
    "${backupSoftware}_remove" "${quiet}" "${verbose}" "${removeList[@]}"
  done
fi

if [[ "${cleanup}" -ne 0 ]]; then
  for backupSoftware in "${backupSoftwares[@]}"; do
    "${backupSoftware}_cleanup" "${quiet}" "${verbose}"
  done
fi

if [[ "${list}" -ne 0 ]]; then
  for backupSoftware in "${backupSoftwares[@]}"; do
    "${backupSoftware}_list" "${quiet}" "${verbose}"
  done
fi

