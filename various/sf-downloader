#!/bin/bash
#
# Sourceforge downloader.
# Automates the download of software latest version from sourceforge or google code.
#
# For suggestion, bug reports, please contact Pierre-Yves Landur√© <pierre-yves.landure@biapy.fr>
version="1.3.7"

# History
# -------
#
# 1.3.7:
#  - Fix null byte warning in basename and dirname.
#  - Correct most shellcheck errors.
#

# Get the basename of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function basename() {

  [[ ${#} -eq 0 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      command basename -z -- "${@}" \
        | command tr -d '\0'
      ;;
    'Darwin' | * )
      command basename -- "${@}"
      ;;
  esac

  return ${?}
} # basename()
export -f 'basename'


script_name="$(basename "${0}")"



# Print this script help.
function usage {
  echo "Sourceforge Downloader v${version}
This tool automates the download of software latest version from sourceforge or google code.

Usage :

  ${script_name} [ --sourceforge | --googlecode | --ckeditor \\
                  | --generic='http://domain.com/download'  ] \\
        [ --download | --zip | --tgz | --tbz2 | --version ] \\
        [ --strip-components=NUMBER | -s NUMBER ] \\
        [ --output-directory=/path | -d /path ] \\
        [ --download-template=file-name-template ] \\
        [ --verbose ] \\
        project-name file-name-template

  Mandatory arguments are :
    * project-name : The sourceforge project name as
          in http://sourceforge.net/projects/project-name/ .
    * file-name-template : The template of the filename to download with the
          version replaced by version.
          Example : To download 'xmlrpc-c-1.16.41.tgz',
             use this template: 'xml-rpc-c-version.tgz'.

  Available options are :
    * --help | -h   : Display this message.
    * --sourceforge : Fetch files from sourceforge.net (default).
    * --sf-alt      : Fetch files from sourceforge.net,
                      alternative version detection method.
    * --googlecode  : Fetch files from googlecode.com.
    * --ckeditor    : Fetch ckeditor files from cksource.com.
    * --generic     : Fetch files from custom source. Take as argument the URL
                      of page containing links to the file to download.
    * --download    : Download a file.
    * --tgz         : Download a archive and decompress it as tar.gz.
    * --tbz2        : Download a archive and decompress it as tar.bz2.
    * --zip         : Download a archive and decompress it as zip.
    * --version     : Print the detected sources version.
    * --strip-components | -s : When used with --tgz, --tbz2 or --zip, strip
                      NUMBER leading components from file names on extraction
    * --output-directory | -d : Path where to extract or download the files.
    * --download-template     : Allow to specify a different filename template
                                for download. The filename template use the
                                same version as the main one.
    * --verbose     : Display detection and download process informations.
"

  [[ -n "${1}" ]] && exit "${1}"
} # usage



# Get the dirname of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function dirname() {

  [[ ${#} -eq 0 ]] && exit 1

  if command dirname -z '/' &>'/dev/null'; then
    command dirname -z -- "${@}" \
        | command tr -d '\0'
  else
    command dirname -- "${@}"
  fi

  return ${?}
} # dirname()
export -f 'dirname'


# Get the absolute path for a file or directory.
# Print its path on &1 if found.
#
# @param string $path A relative path.
#
# @return ${realpath} A absolute path.
function realpath() {
  [[ ${#} -ne 1 ]] && exit 1

  local realpath

  case "$(uname)" in
    'Linux' )
      realpath="$(readlink -f "${1}")"
      ;;
    'Darwin' )
      realpath="$(stat -f '%N' "${1}")"
      ;;
    * )
      realpath="$(realpath "${1}")"
      ;;
  esac

  echo -n "${realpath}"
  return 0
} # realpath



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
# Print its path on &1 if found.
#
# @param string $path A relative path.
#
# @return Exit with error if the path is missing.
function realpath_check() {
  [[ ${#} -ne 1 ]] && exit 1

  local realpath
  realpath="$(realpath "${1}")"

  if [[ -n "${realpath}" && ! -e "${realpath}" ]]; then
    realpath=''
  fi

  if [[ -z "${realpath}" ]]; then
    cecho 'redbold' "Error: File '${1}' does not exists." >&2
    exit 1
  fi

  echo -n "${realpath}"
  return 0
} # realpath_check



# Echo text in color.
#
# Colors definitions.
# See http://mywiki.wooledge.org/BashFAQ/037
#
# @param string $color Color and weight for text. (boldgreen for example).
# @param string $text The text to echo (and echo options).
function cecho() {
  if [[ ${#} -lt 2 ]]; then
    echo "${@}"
    return 0
  fi

  local color="${1}"

  # remove color information from arguments.
  shift 1

  # Check that the output is to a terminal.
  if [[ ! -t 1 ]]; then
    # Not outputing to a terminal, discaring colors.
    echo "${@}"
    return 0
  fi

  # Bash 4 version with associative array.
  ## Color and weight definitions.
  #declare -A font
  #font['black']="$(tput 'setaf' 0)"
  #font['red']="$(tput 'setaf' 1)"
  #font['green']="$(tput 'setaf' 2)"
  #font['yellow']="$(tput 'setaf' 3)"
  #font['blue']="$(tput 'setaf' 4)"
  #font['magenta']="$(tput 'setaf' 5)"
  #font['cyan']="$(tput 'setaf' 6)"
  #font['white']="$(tput 'setaf' 7)"

  #font['bgBlack']="$(tput 'setab' 0)"
  #font['bgRed']="$(tput 'setab' 1)"
  #font['bgGreen']="$(tput 'setab' 2)"
  #font['bgYellow']="$(tput 'setab' 3)"
  #font['bgBlue']="$(tput 'setab' 4)"
  #font['bgMagenta']="$(tput 'setab' 5)"
  #font['bgCyan']="$(tput 'setab' 6)"
  #font['bgWhite']="$(tput 'setab' 7)"

  #font['bold']="$(tput 'bold')"
  #font['stout']="$(tput 'smso')" # Standout.
  #font['under']="$(tput 'smul')" # Underline.
  #font['blink']="$(tput 'blink')" # Blinking
  #font['italic']="$(tput 'sitm')"

  ## Parse the color string.
  #for key in "${!font[@]}"; do
  #  [[ "${color}" = *"${key}"* ]] && echo -n "${font[${key}]}"
  #done

  declare -a fontIndex
  declare -a fontValue

  local index=0
  fontIndex[$index]='black';     fontValue[$index]="$(tput 'setaf' 0)"; ((index++))
  fontIndex[$index]='red';       fontValue[$index]="$(tput 'setaf' 1)"; ((index++))
  fontIndex[$index]='green';     fontValue[$index]="$(tput 'setaf' 2)"; ((index++))
  fontIndex[$index]='yellow';    fontValue[$index]="$(tput 'setaf' 3)"; ((index++))
  fontIndex[$index]='blue';      fontValue[$index]="$(tput 'setaf' 4)"; ((index++))
  fontIndex[$index]='magenta';   fontValue[$index]="$(tput 'setaf' 5)"; ((index++))
  fontIndex[$index]='cyan';      fontValue[$index]="$(tput 'setaf' 6)"; ((index++))
  fontIndex[$index]='white';     fontValue[$index]="$(tput 'setaf' 7)"; ((index++))

  fontIndex[$index]='bgBlack';   fontValue[$index]="$(tput 'setab' 0)"; ((index++))
  fontIndex[$index]='bgRed';     fontValue[$index]="$(tput 'setab' 1)"; ((index++))
  fontIndex[$index]='bgGreen';   fontValue[$index]="$(tput 'setab' 2)"; ((index++))
  fontIndex[$index]='bgYellow';  fontValue[$index]="$(tput 'setab' 3)"; ((index++))
  fontIndex[$index]='bgBlue';    fontValue[$index]="$(tput 'setab' 4)"; ((index++))
  fontIndex[$index]='bgMagenta'; fontValue[$index]="$(tput 'setab' 5)"; ((index++))
  fontIndex[$index]='bgCyan';    fontValue[$index]="$(tput 'setab' 6)"; ((index++))
  fontIndex[$index]='bgWhite';   fontValue[$index]="$(tput 'setab' 7)"; ((index++))

  fontIndex[$index]='bold';      fontValue[$index]="$(tput 'bold')"; ((index++))
  fontIndex[$index]='stout';     fontValue[$index]="$(tput 'smso')"; ((index++)) # Standout.
  fontIndex[$index]='under';     fontValue[$index]="$(tput 'smul')"; ((index++)) # Underline.
  fontIndex[$index]='blink';     fontValue[$index]="$(tput 'blink')"; ((index++)) # Blinking.
  fontIndex[$index]='italic';    fontValue[$index]="$(tput 'sitm')"; ((index++))

  for key in "${!fontIndex[@]}"; do
    [[ "${color}" = *"${fontIndex[${key}]}"* ]] && echo -n "${fontValue[${key}]}"
  done

  # Output the text.
  echo "${@}"

  # Reset all attributes.
  tput 'sgr0'

  return 0
} # cecho()



# Check if a binary is present. Print its path on &1 if found.
#
# @param string $binary The binaries to check, separated by ;.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
function check_binary() {
  [[ ${#} -ne 2 ]] && exit 1

  local primary
  local binaries
  local binary

  primary="${1%%;*}"
  binaries=()

  read -d ';' -r -a binaries <<< "${1}"

  # Test the binary presence.
  for binary in "${binaries[@]}"; do
    if type "${binary}" &>'/dev/null'; then
      command -v "${binary}"
      return 0
    fi
  done

  cecho 'redbold' "Error: '${primary}' is missing. Please install package '${2}'." >&2
  exit 1
} # check_binary()



# Download a file from the given URL.
#
# @param string $url The URL of the file to download.
# @param string $filename The filename on the filesystem.
# @param string $path The path where to save the file (need a filename value).
# @param string $user_agent An optionnal user agent.
#
# @return ${download_file} The path to the downloaded file.
function download_file {
  [[ ${#} -lt 1 ]] && exit 1

  local binary
  local download_command

  binary="$(check_binary 'wget;curl' 'wget')"
  download_command="$(basename "${binary}")"

  local download_path='/tmp'
  if [[ -n "${3}" ]]; then
    download_path="${3}"
  fi

  # Download a file.
  local download_file=''
  if [[ -n "${2}" ]]; then
    download_file="${download_path}/${2}"
  else
    download_file="$(mktemp -t 'tmp.XXXXXXXXXX')"
  fi

  local user_agent="${4}"

  if [[ -n "${user_agent}" ]]; then
    case "${download_command}" in
      'curl' )
        curl --silent --location --insecure "${1}" \
            --user-agent="${user_agent}" --output "${download_file}"
        ;;
      'wget' | * )
        wget --quiet --no-check-certificate "${1}" \
            --user-agent="${user_agent}" --output-document="${download_file}"
        ;;
    esac
  else
    case "${download_command}" in
      'curl' )
        curl --silent --location --insecure "${1}" \
            --output "${download_file}"
        ;;
      'wget' | * )
        wget --quiet --no-check-certificate "${1}" \
            --output-document="${download_file}"
        ;;
    esac
  fi

  if [[ ! -s "${download_file}" ]]; then
    test -e "${download_file}" && rm "${download_file}"
    cecho 'redbold' "Error : Unable to download file from '${1}'." >&2
    exit 1
  fi

  echo -n "${download_file}"
  return 0
} # download_file



# Download and uncompress a tgz file from the given URL.
#
# @param string $url The URL of the file to download.
# @param string $path An optionnal extraction path.
# @param string $strip An optionnal strip components value.
# @param string $user_agent An optionnal user agent.
#
# @return ${download_tgz} The path to the extracted content.
function download_tgz {
  [[ ${#} -lt 1 ]] && exit 1

  local download_tgz
  local strip_components
  local user_agent
  local download_file

  download_tgz="${2}"
  if [[ -n "${download_tgz}" ]]; then
    mkdir -p "${download_tgz}"
  else
    download_tgz="$(mktemp -d -t 'tmp.XXXXXXXXXX')"
  fi

  strip_components="0"
  if [[ -n "${3}" ]]; then
    strip_components="${3}"
  fi

  user_agent="${4}"

  download_file="$(download_file "${1}")"

  # Untar the downloaded file and place it at its final location.
  tar --strip-components="${strip_components}" \
      --directory "${download_tgz}" \
      -xzf "${download_file}"
  rm "${download_file}"

  if [[ -z "$(ls -A "${download_tgz}")" ]]; then
    cecho 'redbold' "Error : unable to untar file downloaded from '${1}'." >&2
    exit 1
  fi

  if [[ $(find "${download_tgz}" -maxdepth 1 | wc -l) -eq 2 \
        && "${strip_components}" = "0" ]]; then
    download_tgz="${download_tgz}/$(ls -1 "${download_tgz}")"
  fi

  echo -n "${download_tgz}"
  return 0
} # download_tgz



# Download and uncompress a tar.bzip2 file from the given URL.
#
# @param string $url The URL of the file to download.
# @param string $path An optionnal extraction path.
# @param string $strip An optionnal strip components value.
# @param string $user_agent An optionnal user agent.
#
# @return ${download_tbz2} The path to the extracted content.
function download_tbz2 {
  check_binary "bzip2" "bzip2" > '/dev/null'
  [[ ${#} -lt 1 ]] && exit 1

  local download_tbz2
  local strip_components
  local user_agent
  local download_file

  download_tbz2="${2}"
  if [[ -n "${download_tbz2}" ]]; then
    mkdir -p "${download_tbz2}"
  else
    download_tbz2="$(mktemp -d -t "tmp.XXXXXXXXXX")"
  fi

  strip_components="0"
  if [[ -n "${3}" ]]; then
    strip_components="${3}"
  fi

  user_agent="${4}"

  download_file="$(download_file "${1}")"

  # Untar the downloaded file and place it at its final location.
  tar --strip-components="${strip_components}" \
      --directory "${download_tbz2}" \
      -xjf "${download_file}"
  rm "${download_file}"

  if [[ -z "$(ls -A "${download_tbz2}")" ]]; then
    cecho 'redbold' "Error : unable to untar file downloaded from '${1}'." >&2
    exit 1
  fi

  if [[ $(find "${download_tbz2}" -maxdepth 1 | wc -l) -eq 2 \
        && "${strip_components}" = "0" ]]; then
    download_tbz2="${download_tbz2}/$(ls -1 "${download_tbz2}")"
  fi

  echo -n "${download_tbz2}"
  return 0
} # download_tbz2



# Download and uncompress a zip file from the given URL.
#
# @param string $url The URL of the file to download.
# @param string $path An optionnal extraction path.
# @param string $strip An optionnal strip components value.
# @param string $user_agent An optionnal user agent.

# @return ${download_zip} The path to the extracted content.
function download_zip {
  check_binary "unzip" "unzip" > '/dev/null'
  [[ ${#} -lt 1 ]] && exit 1

  local download_zip
  local strip_components
  local user_agent
  local download_file

  download_zip="${2}"
  if [[ -n "${download_zip}" ]]; then
    mkdir -p "${download_zip}"
  else
    download_zip="$(mktemp -d -t "tmp.XXXXXXXXXX")"
  fi

  strip_components="0"
  if [[ -n "${3}" ]]; then
    strip_components="${3}"
  fi

  extract_path="${download_zip}"
  if [[ "${strip_components}" != "0" ]]; then
    extract_path="$(mktemp -d -t "tmp.XXXXXXXXXX")"
  fi

  download_file="$(download_file "${1}")"

  # Untar the downloaded file and place it at its final location.
  unzip -d "${extract_path}" -qq "${download_file}"
  rm "${download_file}"

  if [[ -z "$(ls -A "${extract_path}")" ]]; then
    cecho 'redbold' "Error : unable to unzip file downloaded from '${1}'." >&2
    exit 1
  fi

  if [[ "${strip_components}" != "0" ]]; then
    find "${extract_path}" -mindepth "$((strip_components + 1))" -maxdepth "$((strip_components + 1))" -print0 \
      | xargs -0 -iFILE cp -a FILE "${download_zip}"

    rm -r "${extract_path}"
  fi

  if [[ $(find "${download_zip}" -maxdepth 1 | wc -l) -eq 2 \
        && "${strip_components}" = "0" ]]; then
    download_zip="${download_zip}/$(ls -1 "${download_zip}")"
  fi

  echo -n "${download_zip}"
  return 0
} # download_zip


#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex()
{
  let $# || return 1
  local optlist="${1#;}"
  let optind || optind=1
  [[ $optind -lt $# ]] || return 1
  shift $optind
  if [[ "$1" != "-" && "$1" != "${1#-}" ]]; then
    optind=$((optind+1));
    if [[ "$1" != "--" ]]; then
      local o
      o="-${1#-$optofs}"
      for opt in ${optlist#;}
      do
        optopt="${opt%[;.:]}"
        unset optarg
        local opttype="${opt##*[^;:.]}"
        [[ -z "$opttype" ]] && opttype=";"
        if [[ ${#optopt} -gt 1 ]]; then # long-named option
          case $o in
            "--$optopt")
              if [[ "$opttype" != ":" ]]; then
                return 0;
              fi
              optarg="$2"
              if [[ -z "$optarg" ]]; then # error: must have an agrument
                let OPTERR && cecho 'redbold' "$0: error: $optopt must have an argument" >&2
                optarg="$optopt";
                optopt="?"
                return 1;
              fi
              optind=$((optind+1)) # skip option's argument
              return 0
            ;;
            "--$optopt="*)
              if [[ "$opttype" = ";" ]]; then  # error: must not have arguments
                let OPTERR && cecho 'redbold' "$0: error: $optopt must not have arguments" >&2
                optarg="$optopt"
                optopt="?"
                return 1
              fi
              optarg=${o#"--$optopt="}
              return 0
            ;;
          esac
        else # short-named option
          case "$o" in
            "-$optopt")
              unset optofs
              [[ "$opttype" != ":" ]] && return 0
              optarg="$2"
              if [[ -z "$optarg" ]]; then
                cecho 'redbold' "$0: error: -$optopt must have an argument" >&2
                optarg="$optopt"
                optopt="?"
                return 1
              fi
              optind=$((optind+1)) # skip option's argument
              return 0
            ;;
            "-$optopt"*)
              if [[ $opttype = ";" ]]; then # an option with no argument is in a chain of options
                optofs="$optofs?" # move to the next option in the chain
                optind=$((optind-1)) # the chain still has other options
                return 0
              else
                unset optofs
                optarg="${o#-$optopt}"
                return 0
              fi
            ;;
          esac
        fi
      done
      cecho 'redbold' "Error : invalid option : '${o}'." >&2
      usage 1
    fi
  fi
  optopt="?"
  unset optarg
  return 1
}
function optlistex
{
  local l="$1"
  local m # mask
  local r # to store result
  while [[ ${#m} -lt $((${#l}-1)) ]]; do m="$m?"; done # create a "???..." mask
  while [[ -n "$l" ]]; do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [[ -n "${l%%[^:.;]*}" ]]; then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo "${r}"
}
function getopt()
{
  local optlist
  optlist=$(optlistex "${1}")
  shift
  getoptex "$optlist" "$@"
  return $?
}
#######################################################################################
#######################################################################################
#######################################################################################

# Check for binaries presence
check_binary "basename" "coreutils" > '/dev/null'
check_binary "dirname" "coreutils" > '/dev/null'
check_binary "sed" "sed" > '/dev/null'
binary="$(check_binary "wget;curl" "wget" '/dev/null')"
download_command="$(basename "${binary}")"

user_agent="Mozilla/5.0 (X11; U; Linux $(uname -m); rv:5.0) Gecko/20100101 Firefox/5.0"
download_user_agent=""

action=""
forge="sourceforge"
generic_url=""

download_template=""

output_directory=""
strip_components="0"

verbose=false

action="download"
# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help h verbose version v download tgz tbz2 zip sourceforge sf-alt googlecode ckeditor generic: download-template: strip-components: s: output-directory: d:" "${@}"; do
  # Options debuging.
  # echo "Option <$optopt> ${optarg:+has an arg <$optarg>}"

  case "${optopt}" in
    'sourceforge' )
      forge="sourceforge"
      ;;
    'sf-alt' )
      forge="sf-alt"
      ;;
    'googlecode' )
      forge="googlecode"
      ;;
    'ckeditor' )
      forge="ckeditor"
      ;;
    'generic' )
      forge="generic"
      generic_url="${optarg}"
      ;;
    'version' | 'v' )
      action="print-version"
      ;;
    'tgz' )
      action="untar-ungzip"
      ;;
    'tbz2' )
      action="untar-unbzip2"
      ;;
    'zip' )
      action="unzip"
      ;;
    'download-template' )
      download_template="${optarg}"
      ;;
    'strip-components' | 's' )
      strip_components="${optarg}"
      ;;
    'output-directory' | 'd' )
      output_directory="${optarg}"
      ;;
    'verbose' )
      verbose=true
      ;;
    'help' | 'h' )
      usage
      exit 0
      ;;
    * )
      cecho 'redbold' "Error: unsupported option '${optopt}'." >&2
      exit 1
      ;;
  esac
done

shift $((optind-1))

if [[ ${#} -ne 2 ]]; then
  cecho 'redbold' "Error: project name and/or filename template missing." >&2
  exit 1
fi

project_name="${1}"
filename_template="${2}"

##
## This is where the source download URL and version detection is done.
## It is frequently broken by sourceforge and googlecode updates.
##
case "${forge}" in
  'googlecode' )
    case "${download_command}" in
      'curl' )
        version="$(curl "http://code.google.com/p/${project_name}/downloads/list" \
            --silent --location --output "-" \
            | grep --max-count=1 "//${project_name}.googlecode.com/files/${filename_template//VERSION/[^\"\']*}" \
            | sed -e "s|.*href=\"//${project_name}.googlecode.com/files/\([^\"]*\)\".*|\1|" \
            | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
            )"
        ;;
      'wget' | * )
        version="$(wget "http://code.google.com/p/${project_name}/downloads/list" \
            --quiet --output-document=- \
            | grep --max-count=1 "//${project_name}.googlecode.com/files/${filename_template//VERSION/[^\"\']*}" \
            | sed -e "s|.*href=\"//${project_name}.googlecode.com/files/\([^\"]*\)\".*|\1|" \
            | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
            )"
        ;;
    esac

    if [[ -n "${download_template}" ]]; then
      source_url="http://${project_name}.googlecode.com/files/${download_template//VERSION/${version}}"
    else
      source_url="http://${project_name}.googlecode.com/files/${filename_template//VERSION/${version}}"
    fi

    ;;

  'ckeditor' )
    case "${download_command}" in
      'curl' )
        source_url="$(curl "http://ckeditor.com/download" \
            --silent --location --output "-" \
            | grep --max-count=1 "http://.*/${filename_template//VERSION/[^\"\']*}" \
            | sed -e "s|.*href=\"\([^\"]*\)\".*|\1|" \
            )"
        ;;
      'wget' | * )
        source_url="$(wget "http://ckeditor.com/download" \
            --quiet --output-document=- \
            | grep --max-count=1 "http://.*/${filename_template//VERSION/[^\"\']*}" \
            | sed -e "s|.*href=\"\([^\"]*\)\".*|\1|" \
            )"
        ;;
    esac

    version="$(echo "${source_url}" \
        | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
        )"
    ;;

  'generic' )
    ${verbose} && cecho "Step 1 : Detecting file URL using generic." >&2

    # Compute root url.
    root_url="$(echo "${generic_url}" | cut -d '/' -f 1-3)"
    base_url="$(echo "${generic_url}" | sed -e 's|/[^/]*$||')"

    case "${download_command}" in
      'curl' )
        ${verbose} && cecho "Step 2 : use curl to fetch contents from '${generic_url}'." >&2

        source_url="$(curl "${generic_url}" \
            --user-agent="${user_agent}" --silent --location --output "-" \
            | sed -e "s|\(href=[\"']\)/|\1${root_url}/|g" \
                  -e "s|href=[\"']\([^:\"']*\)[\"']|href=\"${base_url}/\1\"|g" \
            | grep --max-count=1 --only-matching "http[s]*://[^\"']*/${filename_template//VERSION/[^\"\']*}[^\"']*\"" \
            | sed -e 's|"$||' \
            )"
        ;;
      'wget' | * )
        ${verbose} && cecho "Step 2 : use wget to fetch contents from '${generic_url}'." >&2

        source_url="$(wget "${generic_url}" \
            --user-agent="${user_agent}" --quiet \
            --no-check-certificate --output-document=- \
            | sed -e "s|\(href=[\"']\)/|\1${root_url}/|g" \
                          -e "s|href=[\"']\([^:\"']*\)[\"']|href=\"${base_url}/\1\"|g" \
            | grep --max-count=1 --only-matching "http[s]*://[^\"']*/${filename_template//VERSION/[^\"\']*}[^\"']*\"" \
            | sed -e 's|"$||' \
            )"
         ;;
    esac

    ${verbose} && cecho "Step 3 : detect version number in '${source_url}'." >&2

    version="$(echo "${source_url}" \
        | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
        )"

    ${verbose} && cecho "Step 4 : detected version '${version}'." >&2

    if [[ -n "${download_template}" ]]; then
      ${verbose} && cecho "Step 4b: applying version to download template '${download_template}'." >&2
      source_url="${download_template//VERSION/${version}}"
    fi

    # For generic download, use user agent.
    download_user_agent="${user_agent}"
    ;;

  'sf-alt' )
    source_url="http://sourceforge.net/projects/${project_name}/files/latest/download"
    case "${download_command}" in
      'curl' )
        version="$(curl --silent --location --output '-' \
              "http://sourceforge.net/projects/${project_name}/" \
          | grep --max-count=1 "${filename_template//VERSION/[^\"\']*}" \
          | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
          )"
        ;;
      'wget' | * )
        version="$(wget --quiet --output-document=- \
              "http://sourceforge.net/projects/${project_name}/" \
          | grep --max-count=1 "${filename_template//VERSION/[^\"\']*}" \
          | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
          )"
        ;;
    esac

    if [[ -n "${download_template}" ]]; then
      source_url="http://sourceforge.net/projects/${project_name}/files/${download_template//VERSION/${version}}"
    fi

    ;;

  'sourceforge' | * )
    source_url="http://sourceforge.net/projects/${project_name}/files/latest/download"
    case "${download_command}" in
      'curl' )
        version="$(curl --silent --location --output '-' \
            --user-agent="${user_agent}" \
            --cookie="FreedomCookie=true" \
            "${source_url}" \
          | grep --max-count=1 "${filename_template//VERSION/[^\"\']*}" \
          | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
          )"
        ;;
      'wget' | * )
        version="$(wget --quiet --output-document=- \
            --user-agent="${user_agent}" \
            --header="Cookie: FreedomCookie=true" \
            "${source_url}" \
          | grep --max-count=1 "${filename_template//VERSION/[^\"\']*}" \
          | sed -e "s/.*${filename_template//VERSION*/}\(.*\)${filename_template//*VERSION/}.*/\1/g" \
          )"
        ;;
    esac

    if [[ -n "${download_template}" ]]; then
      source_url="http://sourceforge.net/projects/${project_name}/files/${download_template//VERSION/${version}}"
    fi

    ;;
esac

if [[ -z "${source_url}" ]]; then
  cecho 'redbold' "Error: unable to detect download URL." >&2
  exit 1
elif [[ -z "${version}" ]]; then
  cecho 'redbold' "Error: unable to detect software version." >&2
  exit 1
fi

case "${action}" in
  'print-version' )
    echo "${version}"
    ;;
  'untar-ungzip' )
    download_tgz "${source_url}" "${output_directory}" "${strip_components}" "${download_user_agent}"
    ;;
  'untar-unbzip2' )
    download_tbz2 "${source_url}" "${output_directory}" "${strip_components}" "${download_user_agent}"
    ;;
  'unzip' )
    download_zip "${source_url}" "${output_directory}" "${strip_components}" "${download_user_agent}"
    ;;
  'download' | *)
    ${verbose} && cecho "Step 5 : download file from '${source_url}'." >&2
    download_file "${source_url}" "${filename_template//VERSION/${version}}" "${output_directory}" "${download_user_agent}"
    ;;
esac

exit 0

